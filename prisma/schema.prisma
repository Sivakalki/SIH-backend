// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  user_id      Int      @id @default(autoincrement())
  name         String
  email        String   @unique
  password     String
  phone        String
  role         Role     @relation(fields: [role_id], references: [role_id])
  role_id      Int
  created_time DateTime @default(now())
  ri RI[]
  Report Report[]
  svro SVRO[]
  mvro MVRO[]
  mro MRO[]
  Application Application[] @relation("ApplicationsAppliedBy")

  Application2 Application[] @relation("ApplicationsCurrentUser")
}

model Role {
  role_id   Int     @id @default(autoincrement())
  role_type String  @unique
  users     User[]

  Application Application[]
}

model Address {
  address_id    Int      @id @default(autoincrement())
  pincode       String
  state         String
  district      String
  mandal        String
  sachivalayam  String
  address String
  application   Application? 
}

model Caste {
  caste_id   Int      @id @default(autoincrement())
  caste_type String   @unique
  applications Application[]
}

model Application {
  application_id        Int        @id @default(autoincrement())
  applied_by_id Int 
  applied_by User @relation("ApplicationsAppliedBy", fields: [applied_by_id], references: [user_id])
  full_name             String
  dob                   DateTime
  gender                GENDER
  religion              String
  caste                 Caste      @relation(fields: [caste_id], references: [caste_id])
  caste_id              Int        
  sub_caste             String
  parent_religion       String
  parent_guardian_id  Int
  parent_guardian_type  ParentGuardianType @relation(fields: [parent_guardian_id],references: [id])
  parent_guardian_name  String
  address_id            Int        @unique
  address               Address    @relation(fields: [address_id], references: [address_id])
  addressProof_id       Int    @unique
  addressProof          AddressProof @relation(fields: [addressProof_id], references: [id])
  casteProof_id         Int @unique
  casteProof            CasteProof  @relation(fields: [casteProof_id], references: [id])
  dobProof_id           Int @unique
  dobProof              DobProof @relation(fields: [dobProof_id], references: [id])
  marital_status        MARITAL
  aadhar_num            String  @unique
  phone_num             String  
  email                 String
  status              STATUS
  current_user_id    Int?
  current_user       User?       @relation("ApplicationsCurrentUser",fields: [current_user_id], references: [user_id])
  mvro_user_id       Int
  mvro_user          MVRO      @relation(fields: [mvro_user_id], references: [user_id])
  svro_user_id       Int
  svro_user          SVRO      @relation(fields: [svro_user_id], references: [user_id])
  current_stage_id        Int?
  current_stage   Role? @relation(fields: [current_stage_id], references: [role_id])
  created_at            DateTime   @default(now())
  updated_at            DateTime   @updatedAt
  certificate           Certificate?  // Optional one-to-one relation
  report Report[]
  counter Int @default(0)
  rejection_reason String?

  reCheck ReCheck[]
}


model Report {
  report_id        Int        @id @default(autoincrement())
  application      Application @relation(fields: [application_id], references: [application_id])
  application_id   Int
  level            String     // SVRO, MVRO, RI, MRO
  handler_id       Int
  handler          User       @relation(fields: [handler_id], references: [user_id])
  description      String
  status           String     // Pending, Approved, Rejected, Correction Needed
  rejection_reason String?
  created_time     DateTime   @default(now())
}

model Certificate {
  id             Int         @id @default(autoincrement())
  caste_id       Int
  validity       DateTime
  file_path      String
  application_id Int         @unique // Ensure one-to-one relation
  application    Application @relation(fields: [application_id], references: [application_id]) // Link to the Application
}

model SVRO {
  svro_id      Int    @id @default(autoincrement())
  pincode      String
  state        String
  district     String
  mandal       String
  sachivalayam String
  application Application[]
  user         User   @relation(fields: [user_id], references: [user_id])
  user_id      Int   @unique
}

model MVRO {
  mvro_id   Int            @id @default(autoincrement())
  state     String
  district  String
  mandal    String
  type      MVROTYPE     
  application Application[]
  sachivalayams Sachivalayam[] // Relationship to Sachivalayam table
  user      User           @relation(fields: [user_id], references: [user_id])
  user_id   Int            @unique  
}

model Sachivalayam {
  sachivalayam_id Int   @id @default(autoincrement())
  name            String
  mvro_id         Int
  mvro            MVRO  @relation(fields: [mvro_id], references: [mvro_id])

  @@index([mvro_id], name: "Sachivalayam_mvro_id_index")
}

model RI {
  ri_id     Int    @id @default(autoincrement())
  state     String
  district  String
  mandal    String
  user      User   @relation(fields: [user_id], references: [user_id])
  user_id   Int @unique
}

model MRO {
  mro_id    Int    @id @default(autoincrement())
  state     String
  district  String
  user      User   @relation(fields: [user_id], references: [user_id])
  user_id   Int @unique
}

model AddressProofType {
  id               Int    @id @default(autoincrement())
  addressProofType String @unique
  addressProofs    AddressProof[] // One-to-many relationship
}

model AddressProof {
  id               Int                @id @default(autoincrement())
  typeId           Int
  filepath         String
  type             AddressProofType   @relation(fields: [typeId], references: [id])

  @@index([typeId], name: "AddressProof_typeId_index")
  Application Application[] 
}

model DobProofType {
  id           Int    @id @default(autoincrement())
  dobProofType String @unique
  dobProofs DobProof[]
}

model DobProof {
  id           Int    @id @default(autoincrement())
  typeId      String
  filepath         String
  type DobProofType @relation(fields: [typeId], references: [dobProofType])

  @@index([typeId],name:"DobProof_typeId_index")
  Application Application[]
}


model CasteProofType {
  id        Int    @id @default(autoincrement())
  casteProofType String @unique
  casteProof CasteProof[]
}

model CasteProof {
  id         Int    @id @default(autoincrement())
  typeId String @unique
  filepath         String
  type CasteProofType @relation(fields: [typeId], references: [casteProofType])

  @@index([typeId], name: "CasteProof_typeId_index")
  Application Application[]
}

model ParentGuardianType{
  id Int @id @default(autoincrement())
  type String @unique

  Application Application[]
}

model ReCheck{
  id Int @id @default(autoincrement())
  description String
  application_id Int
  application Application @relation(fields: [application_id], references: [application_id])
}

enum STATUS{
  PENDING
  COMPLETED
  REJECTED
}

enum GENDER{
  MALE
  FEMALE
  TRANSGENDER
}

enum MARITAL{
  SINGLE
  MARRIED
}

enum MVROTYPE{
  PERMANENT
  TEMPORARY
}